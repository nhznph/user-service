/**
 * NOTE: This class is auto generated by the swagger code generator program (2.3.1).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.dxc.user.api;

import com.dxc.user.api.model.User;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Api(value = "v1", description = "the v1 API")
public interface V1Api {

    @ApiOperation(value = "Add a new user", nickname = "addUser", notes = "add new user in to database", response = String.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully created", response = String.class),
        @ApiResponse(code = 405, message = "Invalid input"),
        @ApiResponse(code = 500, message = "Internal server error") })
    @RequestMapping(value = "/v1/user",
        produces = { "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    ResponseEntity<String> addUser(@ApiParam(value = "user object need to be add in database" ,required=true )  @Valid @RequestBody User body);


    @ApiOperation(value = "delete user by id", nickname = "deleteUser", notes = "delete user by id from path", response = String.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully delete", response = String.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "user not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/v1/user/{id}",
        method = RequestMethod.DELETE)
    ResponseEntity<String> deleteUser(@ApiParam(value = "ID of user to delete",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "get all user", nickname = "getAllUser", notes = "get all user", response = User.class, responseContainer = "List", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid status value") })
    @RequestMapping(value = "/v1/user",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> getAllUser();


    @ApiOperation(value = "get user by id", nickname = "searchUserByID", notes = "get user by id from path", response = User.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully updated", response = User.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "user not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/v1/user/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<User> searchUserByID(@ApiParam(value = "ID of user to get",required=true) @PathVariable("id") String id);


    @ApiOperation(value = "get user by name", nickname = "searchUserByName", notes = "get user by name from path", response = User.class, responseContainer = "List", tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfully updated", response = User.class, responseContainer = "List"),
        @ApiResponse(code = 400, message = "Invalid name supplied"),
        @ApiResponse(code = 404, message = "User not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/v1/user/",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<List<User>> searchUserByName(@NotNull @ApiParam(value = "firstname of user", required = true) @Valid @RequestParam(value = "firstName", required = true) String firstName,@NotNull @ApiParam(value = "last name of user", required = true) @Valid @RequestParam(value = "lastName", required = true) String lastName);


    @ApiOperation(value = "set the monthly limited expenses for notification.", nickname = "setLimitedMonthly", notes = "set the monthly limited expenses for notification .", response = User.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successful operation", response = User.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/v1/{userId}/setLimited",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<User> setLimitedMonthly(@ApiParam(value = "user Id",required=true) @PathVariable("userId") String userId,@NotNull @ApiParam(value = "monthly limited", required = true) @Valid @RequestParam(value = "limit", required = true) Integer limit);


    @ApiOperation(value = "Activate user.", nickname = "updateActivateUser", notes = "Activate user .", response = String.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfull update", response = String.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/v1/{userId}/user/activate",
        produces = { "text/plain" }, 
        method = RequestMethod.PUT)
    ResponseEntity<String> updateActivateUser(@ApiParam(value = "user Id",required=true) @PathVariable("userId") String userId);


    @ApiOperation(value = "Deactivate user.", nickname = "updateDeactivateUser", notes = "Deactivate user .", response = String.class, tags={ "admin", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "successfull update", response = String.class),
        @ApiResponse(code = 500, message = "Internal Server Error") })
    @RequestMapping(value = "/v1/{userId}/user/deactivate",
        produces = { "text/plain" }, 
        method = RequestMethod.PUT)
    ResponseEntity<String> updateDeactivateUser(@ApiParam(value = "user Id",required=true) @PathVariable("userId") String userId);


    @ApiOperation(value = "Update an existing user", nickname = "updateUser", notes = "just update the user by id", response = String.class, tags={ "user", })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "updated successfully", response = String.class),
        @ApiResponse(code = 400, message = "Invalid ID supplied"),
        @ApiResponse(code = 404, message = "user not found"),
        @ApiResponse(code = 405, message = "Validation exception") })
    @RequestMapping(value = "/v1/user/{id}",
        produces = { "text/plain" }, 
        consumes = { "application/json" },
        method = RequestMethod.PUT)
    ResponseEntity<String> updateUser(@ApiParam(value = "ID of user to update",required=true) @PathVariable("id") String id,@ApiParam(value = "user object need to be updated" ,required=true )  @Valid @RequestBody User body);

}
