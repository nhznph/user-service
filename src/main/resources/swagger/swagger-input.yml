swagger: "2.0"
info:
  description: "Manage User"
  version: "1.0.0"
  title: "User"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "apiteam@swagger.io"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "userManager.swagger.io"
basePath: "/v1"
tags:
- name: "User"
  description: "Everything about user"
schemes:
- "https"
- "http"
paths:
  /v1/user:
    post:
      tags:
      - "user"
      summary: "Add a new user"
      description: "add new user in to database"
      operationId: "addUser"
      consumes:
      - "application/json"
      produces:
      - "text/plain"
      parameters:
      - in: "body"
        name: "body"
        description: "user object need to be add in database"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "successfully created"
          schema:
            type: string
            description: ID of the user being created.
        405:
          description: "Invalid input"
        500:
          description: Internal server error
    get:
      tags:
      - "user"
      summary: "get all user"
      description: "get all user"
      operationId: "getAllUser"
      produces:
      - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Invalid status value"
  /v1/user/{id}:
    put:
      tags:
      - "user"
      summary: "Update an existing user"
      description: "just update the user by id"
      operationId: "updateUser"
      consumes:
      - "application/json"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        description: "ID of user to update"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "user object need to be updated"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        200:
          description: "updated successfully"
          schema:
            type: "string"
        400:
          description: "Invalid ID supplied"
        404:
          description: "user not found"
        405:
          description: "Validation exception"
    get:
      tags:
      - "user"
      summary: "get user by id"
      description: "get user by id from path"
      operationId: "searchUserByID"
      produces:
      - "application/json"
      parameters:
      - in: "path"
        name: "id"
        description: "ID of user to get"
        required: true
        type: "string"
      responses:
        200:
          description: "successfully updated"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Invalid ID supplied"
        404:
          description: "user not found"
        405:
          description: "Validation exception"
    delete:
      tags:
      - "user"
      summary: "delete user by id"
      description: "delete user by id from path"
      operationId: "deleteUser"
      parameters:
      - in: "path"
        name: "id"
        description: "ID of user to delete"
        required: true
        type: "string"
      responses:
        200:
          description: "successfully delete"
          schema:
            type: "string"
        400:
          description: "Invalid ID supplied"
        404:
          description: "user not found"
        405:
          description: "Validation exception"
  /v1/user/:
    get:
      tags:
      - "user"
      summary: "get user by name"
      description: "get user by name from path"
      operationId: "searchUserByName"
      produces:
      - "application/json"
      parameters:
      - name: "firstName"
        in: "query"
        description: "firstname of user"
        required: true
        type: "string"
      - name: "lastName"
        in: "query"
        description: "last name of user"
        required: true
        type: "string"
      responses:
        200:
          description: "successfully updated"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/User"
        400:
          description: "Invalid name supplied"
        404:
          description: "User not found"
        405:
          description: "Validation exception"
  /v1/{userId}/user/activate:
    put:
      tags:
      - "admin"
      summary: Activate user.
      description:  Activate user .
      operationId: updateActivateUser
      produces:
      - text/plain
      parameters:
      - in: path
        name: userId
        type: string
        description: user Id
        required: true
      responses:
        '200':
          description: "successfull update"
          schema:
            type: string
            description: activate user.
        '500':
          description: Internal Server Error
  /v1/{userId}/user/deactivate:
    put:
      tags:
      - "admin"
      summary: Deactivate user.
      description:  Deactivate user .
      operationId: updateDeactivateUser
      produces:
      - text/plain
      parameters:
      - in: path
        name: userId
        type: string
        description: user Id
        required: true
      responses:
        '200':
          description: "successfull update"
          schema:
            type: string
            description: Deactivate user.
        '500':
          description: Internal Server Error
  /v1/{userId}/setLimited:
    put:
      tags:
      - "user"
      summary: set the monthly limited expenses for notification.
      description: set the monthly limited expenses for notification .
      operationId: setLimitedMonthly
      produces:
      - application/json
      parameters:
      - in: path
        name: userId
        type: string
        description: user Id
        required: true
      - in: query
        name: limit
        type: string
        description: monthly limited
        required: true
      responses:
        '200':
          description: "set the monthly limit"
          schema:
            type: string
            description: set the monthly limit.
        '500':
          description: Internal Server Error
definitions:
  User:
    type: "object"
    properties:
      id:
        type: "string"
        example: "001"
      firstName:
        type: "string"
        example: "Nhan"
      lastName:
        type: "string"
        example: "Phan"
      email:
        type: "string"
        example: "nhanzks165@gmail.com"
      address:
        type: "string"
        example: "70 lth gv"
      activated:
        readOnly: true
        type: boolean
        example: false
      limited:
        readOnly: true
        type: integer
        example: 0



